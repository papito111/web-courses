

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["fullTextSearch", "fullTextIndex"]
}


datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Course {
  id String @id @default (uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)
  categoryId String?

  category Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attachments Attachment[]
  purchases Purchase[]
  chapters Chapter[]

  @@index([categoryId])
  // @@fulltext([title])
}

model Category {
  id String @id @default (uuid())
  name String @unique
  courses Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Attachment {
  id String @id @default (uuid())
  courseId String
  name String
  url String @db.Text

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@index([courseId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackid String?
  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId],references: [id], onDelete: Cascade)

}

model UserProgress {
  id String @id @default(uuid())
  userId String 
  chapterId String

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String
  courseId String
  course Course @relation(fields: [courseId],references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([courseId])

}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}